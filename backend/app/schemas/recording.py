# backend/app/schemas/recording.py

from pydantic import BaseModel, Field
from datetime import datetime
from typing import Optional
from backend.app.models.recording import RecordingStatus

    
class RecordingCreate(BaseModel):
    """
    Schema for creating a new recording.
    Used when a new file is uploaded and needs to be registered in the system.
    """
    file_name: str = Field(..., description="Name of the uploaded audio file (e.g., '20250729_120000.WAV')")
    lat: float = Field(..., description="Latitude where the audio was recorded")
    lon: float = Field(..., description="Longitude where the audio was recorded")
    recording_datetime: datetime = Field(..., description="Datetime the audio was recorded (ISO 8601)")

class Recording(BaseModel):
    """
    Full recording schema for responses. Includes status and metadata.
    """
    id: int = Field(..., description="Unique ID for the recording (generated by database)")
    file_name: str = Field(..., description="Name of the uploaded audio file")
    lat: float = Field(..., description="Latitude where the audio was recorded")
    lon: float = Field(..., description="Longitude where the audio was recorded")
    recording_datetime: datetime = Field(..., description="Datetime the audio was recorded")
    status: RecordingStatus = Field(..., description="Current processing status of the recording")
    completed_at: Optional[datetime] = Field(None, description="Timestamp when processing completed (if applicable)")
    error_message: Optional[str] = Field(None, description="Error message if processing failed")
    
    model_config = {"from_attributes": True}
    