from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime


class DetectionCreate(BaseModel):
    """
    Schema for creating a new bird detection.
    Used internally during processing to insert detections into the database.
    Requires a foreign key to an existing Recording.
    """
    recording_id: int = Field(..., description="ID of the associated recording")
    detection_time: datetime = Field(..., description="Datetime when this species call occurred")
    species: str = Field(..., description="Common name of the bird species (e.g., Rufous Hummingbird)")
    scientific_name: str = Field(..., description="Scientific (Latin) name of the species (e.g., Selasphorus rufus)")
    confidence: float = Field(..., description="Model confidence score between 0.0 and 1.0")
    start_sec: float = Field(..., description="Start time (in seconds) of the detection in the audio file")
    end_sec: float = Field(..., description="End time (in seconds) of the detection in the audio file")
    lat: float = Field(..., description="Latitude of the recording location")
    lon: float = Field(..., description="Longitude of the recording location")
    sonogram_path: Optional[str] = Field(None, description="Path to generated sonogram image")
    snippet_path: Optional[str] = Field(None, description="Path to audio snippet of the detected bird call")


class Detection(BaseModel):
    """
    Full detection schema for internal use.
    Includes database ID, foreign key, and timestamps.
    """
    
    id: int = Field(..., description="Unique ID of the detection (generated by database)")
    recording_id: int = Field(..., description="Foreign key linking to the associated recording")
    detection_time: datetime = Field(..., description="Datetime when this species call occurred")
    species: str = Field(..., description="Common name of the bird species")
    scientific_name: str = Field(..., description="Scientific name of the species")
    confidence: float = Field(..., description="Confidence score of the detection")
    start_sec: float = Field(..., description="Start time of the detected sound (in seconds)")
    end_sec: float = Field(..., description="End time of the detected sound (in seconds)")
    sonogram_path: Optional[str] = Field(None, description="Path to generated sonogram image")
    snippet_path: Optional[str] = Field(None, description="Path to audio snippet of the detected bird call")
    created_at: datetime = Field(..., description="Timestamp when this detection was stored")

    model_config = {"from_attributes": True}

class DetectionResponse(BaseModel):
    """
    Schema for public-facing detection responses.
    Includes denormalized recording metadata for convenience in API responses.
    """
    file_name: str = Field(..., description="Name of the recording file")
    recording_datetime: datetime = Field(..., description="Datetime the recording was made")
    detection_time: datetime = Field(..., description="Datetime when this species call occurred")
    species: str = Field(..., description="Common name of the bird species")
    scientific_name: str = Field(..., description="Scientific name of the species")
    confidence: float = Field(..., description="Model confidence score")
    start_sec: float = Field(..., description="Start time of the detected sound (in seconds)")
    end_sec: float = Field(..., description="End time of the detected sound (in seconds)")
    lat: float = Field(..., description="Latitude of the recording location")
    lon: float = Field(..., description="Longitude of the recording location")
    sonogram_path: Optional[str] = Field(None, description="Path to sonogram image")
    snippet_path: Optional[str] = Field(None, description="Path to audio snippet")

    model_config = {"from_attributes": True}